{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset used in this notebook can be found on the link: \n",
    "https://archive.ics.uci.edu/ml/datasets/banknote+authentication"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from knn_numpy import *\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Reading dataset\n",
    "banknote_dataset = pd.read_csv(\"data_banknote_authentication.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When you download dataset as .txt or .csv file, you will see that there aren't columns names. You will\n",
    "need to add those manualy.\n",
    "\n",
    "On the site for dataset you can find next information:\n",
    "    \n",
    "1. variance of Wavelet Transformed image (continuous) \n",
    "2. skewness of Wavelet Transformed image (continuous) \n",
    "3. curtosis of Wavelet Transformed image (continuous) \n",
    "4. entropy of image (continuous) \n",
    "5. class (integer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variance</th>\n",
       "      <th>Skewness</th>\n",
       "      <th>Cutosis</th>\n",
       "      <th>Entropy</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.62160</td>\n",
       "      <td>8.6661</td>\n",
       "      <td>-2.8073</td>\n",
       "      <td>-0.44699</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.54590</td>\n",
       "      <td>8.1674</td>\n",
       "      <td>-2.4586</td>\n",
       "      <td>-1.46210</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.86600</td>\n",
       "      <td>-2.6383</td>\n",
       "      <td>1.9242</td>\n",
       "      <td>0.10645</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.45660</td>\n",
       "      <td>9.5228</td>\n",
       "      <td>-4.0112</td>\n",
       "      <td>-3.59440</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.32924</td>\n",
       "      <td>-4.4552</td>\n",
       "      <td>4.5718</td>\n",
       "      <td>-0.98880</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Variance  Skewness  Cutosis  Entropy  Class\n",
       "0   3.62160    8.6661  -2.8073 -0.44699      0\n",
       "1   4.54590    8.1674  -2.4586 -1.46210      0\n",
       "2   3.86600   -2.6383   1.9242  0.10645      0\n",
       "3   3.45660    9.5228  -4.0112 -3.59440      0\n",
       "4   0.32924   -4.4552   4.5718 -0.98880      0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "banknote_dataset.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1. Data preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1.1 Getting Feautres and labels (classes)\n",
    "\n",
    "Index used in spliting data ('-1') means last colum of the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "features = banknote_dataset.iloc[:,:-1].values\n",
    "labels = banknote_dataset.iloc[:, -1].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  3.6216    8.6661   -2.8073   -0.44699]\n",
      " [  4.5459    8.1674   -2.4586   -1.4621 ]\n",
      " [  3.866    -2.6383    1.9242    0.10645]\n",
      " ..., \n",
      " [ -3.7503  -13.4586   17.5932   -2.7771 ]\n",
      " [ -3.5637   -8.3827   12.393    -1.2823 ]\n",
      " [ -2.5419   -0.65804   2.6842    1.1952 ]]\n",
      "\n",
      "[0 0 0 ..., 1 1 1]\n"
     ]
    }
   ],
   "source": [
    "print(features)\n",
    "print()\n",
    "print(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.cross_validation import train_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using train_test_split method from sklearn we can split our data into 2 parts - One used for training\n",
    "a classifier and another to test how generalized is our classifier.\n",
    "\n",
    "In this case we are using 20% (0.2) of our data for testing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (1097, 4)\n",
      "X_test shape: (275, 4)\n",
      "y_train shape: (1097,)\n",
      "y_test shape: (275,)\n"
     ]
    }
   ],
   "source": [
    "print(\"X_train shape: {}\".format(X_train.shape))\n",
    "print(\"X_test shape: {}\".format(X_test.shape))\n",
    "print(\"y_train shape: {}\".format(y_train.shape))\n",
    "print(\"y_test shape: {}\".format(y_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1.2 Scale data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see data in the dataset is not on the same scale (some data is -13 some data between 0 and 1),\n",
    "for better performance/prediction we are going to scale all data into the same scale."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "scaller = StandardScaler()\n",
    "X_train = scaller.fit_transform(X_train)\n",
    "X_test = scaller.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2. Prediction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2.1 (Optional) Predicition using custom KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.cross_validation import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "custom_knn = KNeighborsClassifieR()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Custom knn accuracy:  100.0\n"
     ]
    }
   ],
   "source": [
    "custom_knn.fit(X_train, y_train)\n",
    "pred = custom_knn.predict(X_test)\n",
    "print('Custom knn accuracy: ', accuracy(pred, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQwAAAEWCAYAAACTwaluAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAElFJREFUeJzt3Xu4bHVdx/H3h3MAAckU0EKBQwooUiAg+eCNygjyhj5Z\nIFkaQdCjZaRFQIUKRdHNxBt4IW+oPWkRUkejjDCQm1wDDpciUQSEQm7CAb79sdbGObuz9/7tfc7a\nM+ec9+t55tkza/3W+n1n9p7P/NZv1sxOVSFJLTYadwGS1h0GhqRmBoakZgaGpGYGhqRmBoakZgbG\neizJZkn+Psk9Sf56DfZzaJIvrs3axiXJi5NcP+461lXxPIzxS/J64Gjg2cC9wOXASVV1/hru9w3A\nW4B9q+qRNS50wiUpYKequnHctayvHGGMWZKjgb8A/gB4GrA98D7g1Wth9zsAKzaEsGiRZOm4a1jn\nVZWXMV2AJwH3Aa+bpc2mdIHyzf7yF8Cm/br9gFuB3wTuAG4D3tSvewfwMLCy7+Mw4ATgEyP7XgYU\nsLS//UbgZrpRzn8Ch44sP39ku32Bi4F7+p/7jqz7MvAu4Cv9fr4IbD3DfZuq/7dG6j8I+GlgBXA3\ncOxI+32AC4D/7dueCmzSrzuvvy/39/f350b2/9vAt4CPTy3rt3lm38ee/e1tgTuB/cb9tzGpl7EX\nsCFfgAOAR6aesDO0eSdwIfBUYBvg34F39ev267d/J7Bx/0R7AHhyv356QMwYGMAWwHeAXfp1Pwg8\nt7/+eGAATwH+B3hDv90h/e2t+vVfBm4CdgY262+fPMN9m6r/9/r6D++fsJ8CtgSeCzwI7Ni33wt4\nQd/vMuBa4K0j+yvgWavZ/x/RBe9mo4HRtzkc+A9gc2A58Cfj/ruY5IuHJOO1FfDtmv2Q4VDgnVV1\nR1XdSTdyeMPI+pX9+pVVdQ7dq+suC6znMWC3JJtV1W1Vdc1q2rwcuKGqPl5Vj1TVmcB1wCtH2ny0\nqlZU1YPAZ4E9ZulzJd18zUrg08DWwLur6t6+//8Adgeoqkur6sK+3/8CPgi8tOE+/X5VPdTXs4qq\nOh24EfgqXUgeN8f+NmgGxnjdBWw9x7H1tsAtI7dv6Zc9vo9pgfMA8MT5FlJV99MN448EbkvyhSTP\nbqhnqqanj9z+1jzquauqHu2vTz2hbx9Z/+DU9kl2TnJ2km8l+Q7dvM/Ws+wb4M6q+u4cbU4HdgPe\nU1UPzdF2g2ZgjNcFwEN0x+0z+Sbd5OWU7ftlC3E/3dB7yg+Mrqyq5VX1k3SvtNfRPZHmqmeqpm8s\nsKb5eD9dXTtV1fcBxwKZY5tZ3wZM8kS6eaEPAyckecraKHR9ZWCMUVXdQ3f8/t4kByXZPMnGSQ5M\n8sd9szOB45Nsk2Trvv0nFtjl5cBLkmyf5EnA70ytSPK0JK9OsgVdiN1HN5yf7hxg5ySvT7I0yc8B\nuwJnL7Cm+diSbp7lvn70c9S09bcDPzTPfb4buKSqfhn4AvCBNa5yPWZgjFlV/SndORjH0034fR14\nM/C3fZMTgUuAK4GrgMv6ZQvp60vAZ/p9XcqqT/KN+jq+SffOwUv5/09Iquou4BV078zcRfcOxyuq\n6tsLqWme3ga8nu7dl9Pp7suoE4C/SvK/SX52rp0leTXdxPPU/Twa2DPJoWut4vWMJ24tgiQH0L2S\nLQE+VFUnj7kkNUryEbqAvKOqdht3PePmCGNgSZYA7wUOpBu6H5Jk1/FWpXk4g24UIgyMxbAPcGNV\n3VxVD9O9dbg2zuLUIqiq8+gO0YSBsRieTjcvMeVWVn0LUlpnGBiSmhkYw/sGsN3I7WewOOcsSGud\ngTG8i4GdkuyYZBPgYOCsMdckLYiBMbD+tO03032w6VrgszN8RkMTKMmZdGfk7pLk1iSHjbumcfI8\nDEnNHGFIamZgSGpmYEhqZmBIamZgSGpmYCySJEeMuwYtnL+/joGxePyDW7f5+8PAkDQPE3Xi1tZP\nWVLLttt43GUM4s67HmWbrZaMu4xBrbhy87kbraNW8hAbs+m4yxjMd7mfh+uhub4flYn6T1DLttuY\ni5ZvN3dDTaSf2na2/yagSfbVOrepnYckkpoZGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKaGRiS\nmhkYkpoZGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKa\nGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZ\nGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKaGRiSmhkYkpoZGJKaDRoYSQ5I\ncn2SG5McM2RfkoY3WGAkWQK8FzgQ2BU4JMmuQ/UnaXhDjjD2AW6sqpur6mHg08CrB+xP0sCGDIyn\nA18fuX1rv2wVSY5IckmSS+6869EBy5G0psY+6VlVp1XV3lW19zZbLRl3OZJmMWRgfAPYbuT2M/pl\nktZRQwbGxcBOSXZMsglwMHDWgP1JGtjSoXZcVY8keTOwHFgCfKSqrhmqP0nDGywwAKrqHOCcIfuQ\ntHjGPukpad1hYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpm\nYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIajbj\n/1ZN8n2zbVhV31n75UiaZLP9M+ZrgAIysmzqdgHbD1iXpAk0Y2BU1XaLWYikydc0h5Hk4CTH9tef\nkWSvYcuSNInmDIwkpwI/BryhX/QA8IEhi5I0mWabw5iyb1XtmeRrAFV1d5JNBq5L0gRqOSRZmWQj\nuolOkmwFPDZoVZImUktgvBf4G2CbJO8Azgf+aNCqJE2kOQ9JqupjSS4FXtYvel1VXT1sWZImUcsc\nBsASYCXdYYlnh0obqJZ3SY4DzgS2BZ4BfCrJ7wxdmKTJ0zLC+Hlgr6p6ACDJScClwB8OWZikydNy\neHELqwbLUuDmYcqRNMlm+/DZn9PNWTwAXJNkeX97f7p3SiRtYGY7JJl6J+Qa4Asjyy8crhxJk2y2\nD599eDELkTT55pz0TPJM4CRgV+AJU8uraucB65I0gVomPc8APkr3PRgHAp8FPj1gTZImVEtgbF5V\nywGq6qaqOp7u06uSNjAt52E81H/47KYkRwLfAJ46bFmSJlFLYPwGsAXwa3RzGU8CfmnIoiRNppYP\nn321v3ov3/sSHUkboNlO3Po8/XdgrE5VvXaQiiRNrNlGGKcuWhW9FVduzk9tu8did6u15LFz/d7o\nddaRGzc1m+3ErXPXWjGS1gt+t4WkZgaGpGbNgZFk0yELkTT5Wr5xa58kVwE39Ld3T/KewSuTNHFa\nRhh/CbwCuAugqq7AU8OlDVJLYGxUVbdMW/boEMVImmwtp4Z/Pck+QCVZArwFWDFsWZImUcsI4yjg\naGB74HbgBf0ySRuYls+S3AEcvAi1SJpwLd+4dTqr+UxJVR0xSEWSJlbLHMY/jVx/AvAa4OvDlCNp\nkrUcknxm9HaSjwNfGqwiSRNrIaeG7wjssLYLkTT5WuYw/ofvzWFsBNwNHDNkUZIm06yBkSTA7nTf\n4wnwWFXN+KU6ktZvsx6S9OHw+ap6tL8YFtIGrGUO46Ikzxu8EkkTb7bv9FxaVY8ALwIOT3ITcD/d\nPzSqqtpzkWqUNCFmm8O4CNgTOGiRapE04WYLjED3384WqRZJE262wNgmydEzrayqPxugHkkTbLbA\nWAI8kX6kIUmzBcZtVfXORatE0sSb7W1VRxaSVjFbYPzEolUhaZ0wY2BU1d2LWYikyec/MpLUzMCQ\n1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDU\nzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUbLDASPKRJHckuXqoPiQtriFHGGcA\nBwy4f0mLbLDAqKrzAP8/q7QeWTruApIcARwB8AQ2H3M1kmYz9knPqjqtqvauqr03ZtNxlyNpFmMP\nDEnrDgNDUrMh31Y9E7gA2CXJrUkOG6ovSYtjsEnPqjpkqH1LGg8PSSQ1MzAkNTMwJDUzMCQ1MzAk\nNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1\nMzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUz\nMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMw\nJDUzMCQ1MzAkNUtVjbuGxyW5E7hl3HUMZGvg2+MuQgu2vv/+dqiqbeZqNFGBsT5LcklV7T3uOrQw\n/v46HpJIamZgSGpmYCye08ZdgNaIvz8MjGZJHk1yeZKrk/x1ks3ns31VPf4Hl2S/JGf311+V5JhZ\n+v3+JL+6gHpPSPK21uXT2pyR5Gfm0deyJFcvoMYDk1yS5Nok1yX50/nuo9/PsQvZrmG/j/+equq0\nJCcm+cckmyb5cpJLRtruneTLI9tVkleOrD87yX5D1LmYDIx2D1bVHlW1G/AwcOToynTm/XhW1VlV\ndfIsTb4fmHdgTLokuwGnAj9fVc8BdgNuXODuBgmMUUmOB14IvKaqHuoXPzXJgTNscitw3NB1LTYD\nY2H+DXhW/8p6bZL3AZcB2yXZP8kFSS7rRyJPBEhyQP8qej7w2qkdJXljklP7609L8vkkV/SXfYGT\ngWf2o5tT+nZvT3JxkiuTvGNkX8cluT7JPwG7zHUnkhze7+eKJH8zbdT0siT/lmRFklf07ZckOWWk\n719Zg8fwt4CTquo6gKp6pKre3/ezyggnyX39zx9Mct7ISO/FSU4GNuuXfbJvd3S//uokb+2XLesf\n/w/1yz+Z5GVJvpLkhiT7zPI4/SZwIPDKqnpwZNUpzBwKVwD3JPnJhT5Ak8jAmKckS+n+eK7qF+0C\nfKyqngfcDxwPvKyq9gQuAY5O8gTgdOCVwIuBH5hh938J/GtV7Q7sCVwDHAPc1I9u3p5kf2AnYB9g\nD2CvJC9JshdwMPA8ukB6fsPd+VxVPb/v71rgsJF1y4CXAi8HPtDfh8OAe6rq+f3+D0+yY0M/q7Mb\ncOk8t3k9sLyq9gB2By6vqmP43ujv0P5xeBPwo8AL+hqf12//LODdwI8Az+739yLgbcw8Snkh3Wjy\nwKq6b9q6C4CHk/zYDNueRPf3sN4wMNptluRyuhD4b+DD/fJbqurC/voLgF2Br/RtfxHYge6P8z+r\n6obqTnz5xAx9/DjwfoCqerSq7llNm/37y9foRjXPpguQFwOfr6oHquo7wFkN92m3fhRxFXAo8NyR\ndZ+tqseq6gbg5r6f/YFf6O/bV4Gt+r4Xy8XAm5KcAPxwVd27mjYvonsc7u+f4J+je2yg+x1cVVWP\n0YXxuf3v4yq6gFydG4EAM40UTmSGUKiq8wCSvGiuO7auWDruAtYhD/avbI9LAt2o4vFFwJeq6pBp\n7VbZbg0F+MOq+uC0Pt66gH2dARxUVVckeSOw38i66Wf0Vd/3W6pq+bS+l6220OQkuhEK0x87uifs\nXnRD9+keoX8x6+eFNun3cV6Sl/T7/HiSU6rqY7PdwWkeGrn+2Mjtx5j5uXA7XZiem+TuqvqX0ZVV\n9c9JTqR7sVidqVHGI/Ooc2I5wli7LgRemORZAEm2SLIzcB2wLMkz+3aHzLD9ucBR/bZLkjwJuBfY\ncqTNcuCXRuZGnp7kqcB5wEFJNkuyJd3hz1y2BG5LsjHdk2LU65Js1Nf8Q8D1fd9H9e1JsnOSLWba\neVUd1x8qrC4wTwGO7R8f+r6O7tf9F12YALwKmOpvB+D2qjqdboS3Z99m5VRNdPNLByXZvK/tNf2y\nBauqFXSHeZ+YIfxPpJuTWd22XwSeTHcYtM5zhLEWVdWd/Sv1mUk27RcfX1UrkhwBfCHJt4Hz6Y7h\np/t14LQkhwGPAkdV1QX9xNzVwD/08xjPAS7oRzj30b3TcFmSzwCX030ep+VJ8rt0hxa30A3LR4Pp\neuBfgacBR1bVd5N8iG7oflm6zu8EDmp7dFZVVVf2o6Iz+8nWAs7uV58O/F2Si+hCdGoUtx/w9iQr\n+/v9C/3y04Ark1zWz2OcAVzUr/tQVX1tplHQPOq9OMmbgLOmz1lU1TnpPgc1k5OAv1uT/ieFnyWR\n1MxDEknNDAxJzQwMSc0MDEnNDAxJzQwMSc0MDEnN/g8PXyJIe9bInAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x186bbca0898>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[162   0]\n",
      " [  0 113]]\n"
     ]
    }
   ],
   "source": [
    "cm_custom = confusion_matrix(y_test, pred)\n",
    "\n",
    "plt.matshow(cm_custom)\n",
    "plt.title('Confusion matrix')\n",
    "plt.ylabel('True label')\n",
    "plt.xlabel('Predicted label - Custom KNN')\n",
    "plt.show()\n",
    "print(cm_custom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2.2 Prediction using Sklearn KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "sklearn_knn = KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=1, n_neighbors=5, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sklearn_knn.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sklearn knn accuracy:  100.0\n"
     ]
    }
   ],
   "source": [
    "pred_sklearn = sklearn_knn.predict(X_test)\n",
    "print(\"Sklearn knn accuracy: \", accuracy(pred_sklearn, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQwAAAEWCAYAAACTwaluAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAEYVJREFUeJzt3Xm0JGV9xvHvw8ywLyqgkc1BBMzIiQqEeNAoGoMQMaIn\nRpGQQzQQyBFjiIkLxCBqRM2iEYy7GI0o6jFRJBmQo1EUlH0XBAxhE3BQlEXWX/6outhcZ+59Z6nb\nPTPfzzl9blfV2/X+qvv201VvV3enqpCkFuuMuwBJqw8DQ1IzA0NSMwNDUjMDQ1IzA0NSMwNjDZZk\ngyRfSXJHks+vxHoOTHLaqqxtXJL8dpIrx13H6iqehzF+SV4JHAk8Gfg5cCHwjqo6cyXXexBwBLBn\nVT2w0oVOuCQF7FhVV4+7ljWVexhjluRI4L3A3wOPA7YDPgC8eBWs/gnAVWtDWLRIMn/cNaz2qsrL\nmC7AZsCdwMtmaLMeXaDc1F/eC6zXL9sLuAH4K+BW4GbgT/plbwXuA+7v+3g1cAzw6ZF1LwQKmN9P\nHwxcS7eX80PgwJH5Z47cbk/gHOCO/u+eI8u+AbwN+Ha/ntOALZaxbVP1/81I/fsDvwdcBdwOvHmk\n/R7AWcBP+7bHA+v2y77Zb8td/fa+fGT9bwB+BHxqal5/mx36Pnbtp7cCbgP2Gvf/xqRexl7A2nwB\n9gEemHrCLqPNscDZwGOBLYHvAG/rl+3V3/5YYEH/RLsbeHS/fHpALDMwgI2AnwE798seDzylv/5w\nYACPAX4CHNTf7oB+evN++TeAa4CdgA366eOWsW1T9b+lr/+Q/gn7GWAT4CnAPcD2ffvdgGf0/S4E\nrgBeN7K+Ap60lPW/iy54NxgNjL7NIcDlwIbAYuAfxv1/MckXD0nGa3PgxzXzIcOBwLFVdWtV3Ua3\n53DQyPL7++X3V9WpdK+uO69gPQ8BuyTZoKpurqrLltLmhcAPqupTVfVAVZ0EfB940UibT1TVVVV1\nD3Ay8LQZ+ryfbrzmfuCzwBbA+6rq533/lwNPBaiq86rq7L7f/wU+BDynYZv+rqru7et5hKr6CHA1\n8F26kDxqlvWt1QyM8VoCbDHLsfVWwHUj09f18x5ex7TAuRvYeHkLqaq76HbjDwNuTvLVJE9uqGeq\npq1Hpn+0HPUsqaoH++tTT+hbRpbfM3X7JDslOSXJj5L8jG7cZ4sZ1g1wW1X9YpY2HwF2Ad5fVffO\n0natZmCM11nAvXTH7ctyE93g5ZTt+nkr4i66Xe8pvza6sKoWV9Xv0r3Sfp/uiTRbPVM13biCNS2P\nf6Wra8eq2hR4M5BZbjPj24BJNqYbF/oYcEySx6yKQtdUBsYYVdUddMfvJyTZP8mGSRYk2TfJu/tm\nJwFHJ9kyyRZ9+0+vYJcXAs9Osl2SzYA3TS1I8rgkL06yEV2I3Um3Oz/dqcBOSV6ZZH6SlwOLgFNW\nsKblsQndOMud/d7P4dOW3wI8cTnX+T7g3Kr6U+CrwAdXuso1mIExZlX1j3TnYBxNN+B3PfAa4D/6\nJm8HzgUuBi4Bzu/nrUhfpwOf69d1Ho98kq/T13ET3TsHz+FXn5BU1RJgP7p3ZpbQvcOxX1X9eEVq\nWk6vB15J9+7LR+i2ZdQxwCeT/DTJH862siQvpht4ntrOI4Fdkxy4yipew3ji1hxIsg/dK9k84KNV\nddyYS1KjJB+nC8hbq2qXcdczbu5hDCzJPOAEYF+6XfcDkiwab1VaDifS7YUIA2Mu7AFcXVXXVtV9\ndG8droqzODUHquqbdIdowsCYC1vTjUtMuYFHvgUprTYMDEnNDIzh3QhsOzK9DXNzzoK0yhkYwzsH\n2DHJ9knWBV4BfHnMNUkrxMAYWH/a9mvoPth0BXDyMj6joQmU5CS6M3J3TnJDklePu6Zx8jwMSc3c\nw5DUzMCQ1MzAkNTMwJDUzMCQ1MzAmCNJDh13DVpxPn4dA2Pu+A+3evPxw8CQtBwm6sStLR4zrxZu\nu2DcZQzitiUPsuXm88ZdxqCuunjD2Rutpu7nXhaw3rjLGMwvuIv76t7Zvh+VifolqIXbLuB7i7ed\nvaEm0gu2munXBDTJvltnNLXzkERSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NS\nMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1Iz\nA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMD\nQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUrNBAyPJPkmuTHJ1\nkjcO2Zek4Q0WGEnmAScA+wKLgAOSLBqqP0nDG3IPYw/g6qq6tqruAz4LvHjA/iQNbMjA2Bq4fmT6\nhn7eIyQ5NMm5Sc69bcmDA5YjaWWNfdCzqj5cVbtX1e5bbj5v3OVImsGQgXEjsO3I9Db9PEmrqSED\n4xxgxyTbJ1kXeAXw5QH7kzSw+UOtuKoeSPIaYDEwD/h4VV02VH+ShjdYYABU1anAqUP2IWnujH3Q\nU9Lqw8CQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzA\nkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNTMwJDUzMCQ1MzAkNRsmb+tmmTT\nmW5YVT9b9eVImmQz/RjzZUABGZk3NV3AdgPWJWkCLTMwqmrbuSxE0uRrGsNI8ookb+6vb5Nkt2HL\nkjSJZg2MJMcDzwUO6mfdDXxwyKIkTaaZxjCm7FlVuya5AKCqbk+y7sB1SZpALYck9ydZh26gkySb\nAw8NWpWkidQSGCcAXwS2TPJW4EzgXYNWJWkizXpIUlX/luQ84Pn9rJdV1aXDliVpErWMYQDMA+6n\nOyzx7FBpLdXyLslRwEnAVsA2wGeSvGnowiRNnpY9jD8CdququwGSvAM4D3jnkIVJmjwthxfX8chg\nmQ9cO0w5kibZTB8++2e6MYu7gcuSLO6n96Z7p0TSWmamQ5Kpd0IuA746Mv/s4cqRNMlm+vDZx+ay\nEEmTb9ZBzyQ7AO8AFgHrT82vqp0GrEvSBGoZ9DwR+ATd92DsC5wMfHbAmiRNqJbA2LCqFgNU1TVV\ndTTdp1clrWVazsO4t//w2TVJDgNuBB47bFmSJlFLYPwlsBHwWrqxjM2AVw1ZlKTJ1PLhs+/2V3/O\nL79ER9JaaKYTt75E/x0YS1NVLx2kIkkTa6Y9jOPnrIreVRdvyAu2etpcd6tV5KEz/N7o1dZhC5qa\nzXTi1hmrrBhJawS/20JSMwNDUrPmwEiy3pCFSJp8Ld+4tUeSS4Af9NNPTfL+wSuTNHFa9jD+BdgP\nWAJQVRfhqeHSWqklMNapquumzXtwiGIkTbaWU8OvT7IHUEnmAUcAVw1blqRJ1LKHcThwJLAdcAvw\njH6epLVMy2dJbgVeMQe1SJpwLd+49RGW8pmSqjp0kIokTayWMYyvjVxfH3gJcP0w5UiaZC2HJJ8b\nnU7yKeD0wSqSNLFW5NTw7YEnrOpCJE2+ljGMn/DLMYx1gNuBNw5ZlKTJNGNgJAnwVLrv8QR4qKqW\n+aU6ktZsMx6S9OHwpap6sL8YFtJarGUM43tJnj54JZIm3kzf6Tm/qh4AngUckuQa4C66HzSqqtp1\njmqUNCFmGsP4HrArsP8c1SJpws0UGIHu187mqBZJE26mwNgyyZHLWlhV/zRAPZIm2EyBMQ/YmH5P\nQ5JmCoybq+rYOatE0sSb6W1V9ywkPcJMgfE7c1aFpNXCMgOjqm6fy0IkTT5/yEhSMwNDUjMDQ1Iz\nA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMD\nQ1IzA0NSMwNDUjMDQ1IzA0NSMwNDUjMDQ1IzA0NSs8ECI8nHk9ya5NKh+pA0t4bcwzgR2GfA9Uua\nY4MFRlV9E/D3WaU1yPxxF5DkUOBQgPXZcMzVSJrJ2Ac9q+rDVbV7Ve2+gPXGXY6kGYw9MCStPgwM\nSc2GfFv1JOAsYOckNyR59VB9SZobgw16VtUBQ61b0nh4SCKpmYEhqZmBIamZgSGpmYEhqZmBIamZ\ngSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmB\nIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEh\nqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIamZgSGp\nmYEhqVmqatw1PCzJbcB1465jIFsAPx53EVpha/rj94Sq2nK2RhMVGGuyJOdW1e7jrkMrxsev4yGJ\npGYGhqRmBsbc+fC4C9BK8fHDwBhMkgeTXJjk0iSfBz69EuvaK8kp/fXfT/LGGdo+Ksmfr0AfxyR5\nfev8aW1OTPIHy9HXwiSXLmd9j0tySpKLklye5NR+/sP3zbT2Byc5fnn6mElVGRgYGEO6p6qeVlW7\nAPcBh40uTGe57/+q+nJVHTdDk0cByx0Yq4FjgdOr6qlVtQhYZmiuSknmz0U/qwsDY258C3hS/8p6\nRZIPAOcD2ybZO8lZSc5P8vkkGwMk2SfJ95OcCbx0akWjr5z9q+6X+lfdi5LsCRwH7NDv3bynb/fX\nSc5JcnGSt46s66gkVyb5GrDzbBuR5JB+PRcl+WKSDUcWPz/Jt5JclWS/vv28JO8Z6fvPVuI+fDxw\nw9REVV28lPp+M8kFSXaYNn/Lvt5z+ssz+/l79Pf9BUm+k2Tnfv7B/WPxFeC0fi/mG0m+0D8m/54k\nK7Etq6+q8jLABbiz/zsf+E/gcGAh8BDwjH7ZFsA3gY366TcAbwHWB64HdgQCnAyc0rc5GDi+v/45\n4HX99XnAZn0fl47UsTfd8XfoXiBOAZ4N7AZcAmwIbApcDbx+KdtxzNR8YPOR+W8Hjuivnwj8d7/+\nHeme2OsDhwJH923WA84Ftp9eY+P9+QLgp8DXgaOArfr5e/XbtCdwHrDdUu6nzwDP6q9vB1zRX98U\nmN9ffz7wxZHb3gA8ZqSPO4Bt+m08a2p9a9vF3a3hbJDkwv76t4CPAVsB11XV2f38ZwCLgG/3L1jr\n0v0zPhn4YVX9ACDJp+mefNM9D/hjgKp6ELgjyaOntdm7v1zQT29M96TeBPhSVd3d9/Hlhm3aJcnb\n6Q57NgYWjyw7uaoeAn6Q5Np+G/YGfmNkfGOzvu+rGvp6hKpanOSJwD7AvsAFSXbpF/86XSjuXVU3\nLeXmzwcWjewUbNrvyW0GfDLJjkABC0Zuc3pV3T4y/b2qugGgf1wXAmcu73as7gyM4dxTVU8bndH/\nw941OovuH/OAae0ecbuVFOCdVfWhaX28bgXWdSKwf1VdlORgulfeKdPPAKy+7yOqajRYSLJwqYUm\n7wBeCDD9vuvn3U63t/CZfqDz2cAS4Ga6PZqnA0sLjHXo9up+Ma2/44GvV9VL+pq+MbJ49HECuHfk\n+oOspc8dxzDG62zgmUmeBJBkoyQ7Ad8HFo4cix+wjNufQXeoMzVesBnwc7q9hymLgVeNjI1sneSx\ndIdC+yfZIMkmwIsa6t0EuDnJAuDAactelmSdvuYnAlf2fR/etyfJTkk2WtbKq+qo6gaKfyUskjxv\nasykr3cH4P/6xT+lC5p3JtlrKas+DThiZF1T698MuLG/fvAyt1oPMzDGqKpuo/tHPSnJxfSHI/0r\n4aHAV/tBz2V9vuYvgOcmuYTu+H1RVS2hO8S5NMl7quo0ulfls/p2XwA2qarz6cZALgS+SHfYNJu/\nBb4LnE4XaqOuBP4H+C/gsH4bPgpcDpyf7m3UD7Hir8y7AeeO3E8frapzphZW1S3AfsAJSX5r2m1f\nC+zeD7xezi/fsXo3Xch8m24MSLPwsySSmrmHIamZgSGpmYEhqZmBIamZgSGpmYEhqZmBIanZ/wMi\nM7l4efAP5gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x186bbe94c50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[162   0]\n",
      " [  0 113]]\n"
     ]
    }
   ],
   "source": [
    "cm_sklearn = confusion_matrix(y_test, pred_sklearn)\n",
    "plt.matshow(cm_sklearn)\n",
    "plt.title('Confusion matrix')\n",
    "plt.ylabel('True label')\n",
    "plt.xlabel('Predicted label - Sklearn')\n",
    "plt.show()\n",
    "print(cm_sklearn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step 2.2.1 Test more deeply sklearn algo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are going to use 2 more params to test accuracy for Sklearn algorithm. Precision and Recalls\n",
    "\n",
    "Precision - Scoring measurement which is calculating how many positive predictions that are correct\n",
    "            \n",
    "Recalls - Scoring measurement used to evaluete how to classifier is\n",
    "\n",
    "Note: Precision and Recalls are note the best choice to evaluete classifier. There are other metrics as well such as F1 and ROC AUC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision = P = True_positive / (True_positive + False_positive):  0.994039215686\n",
      "Recalls = True_positive / (True_positive + False_negative):  1.0\n"
     ]
    }
   ],
   "source": [
    "precisions = cross_val_score(sklearn_knn, X_train, y_train, cv=10, scoring='precision')\n",
    "print('Precision = P = True_positive / (True_positive + False_positive): ', np.mean(precisions))\n",
    "\n",
    "recalls = cross_val_score(sklearn_knn, X_train, y_train, cv=5, scoring='recall')\n",
    "print('Recalls = True_positive / (True_positive + False_negative): ', np.mean(recalls))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
